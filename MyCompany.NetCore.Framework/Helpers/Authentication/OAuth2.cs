using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Threading;
using Newtonsoft.Json;

namespace MyCompany.NetCore.Framework.Helpers.Authentication
{
    public class OAuth2
    {
        private Stream ResponseStream { get; set; }
        private string ResponseValue { get; set; }
        public string AccessToken { get; set; }
        private HttpWebResponse EndpointResponse {get;set; }
        public string GetOAuthToken(string requestUriString)
        {
            var requestStopWatch = Stopwatch.StartNew();
            try
            {                
                HttpWebRequest req =
                (HttpWebRequest)WebRequest.Create(requestUriString);
                req.Method = "POST";
                req.Timeout = Timeout.Infinite;
                req.KeepAlive = true;
                EndpointResponse = (HttpWebResponse)req.GetResponse();
                requestStopWatch.Stop();
                double ResponseTime = requestStopWatch.Elapsed.TotalMilliseconds;
                Console.WriteLine($"Time taken by OAuth request to execute is : {ResponseTime} ms ");
                return GetTokenFromResponse();
            }
            catch(WebException failedRequest)
            {                              
                Console.WriteLine($"Request failed due to error : {failedRequest.Message}");
                throw;
            }
            finally
            {
                EndpointResponse?.Close();
            }
        }
        private string GetTokenFromResponse()
        {
            try
            {
                ResponseStream = EndpointResponse.GetResponseStream();
                if (ResponseStream != null)
                    using (var reader = new StreamReader(ResponseStream))
                    {
                        ResponseValue = reader.ReadToEnd();
                    }

                dynamic apiResponse = JsonConvert.DeserializeObject(ResponseValue);
                AccessToken = apiResponse.access_token;
                Console.WriteLine($"Access token generated by authorization server is : {AccessToken}");
            }
            catch (Exception streamProcessing)
            {
                Console.WriteLine($"Unable to process response stream due to error {streamProcessing.Message}");
                throw;
            }
            finally
            {
                ResponseStream?.Dispose();
            }
            return AccessToken;
        }

        
    }
}