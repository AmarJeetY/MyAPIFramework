using Newtonsoft.Json;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Threading;

namespace MyCompany.NetCore.Helpers.Authentication
{
    public class OAuth2
    {
        private Stream ResponseStream { get; set; }
        private string Accesstoken { get; set; }
        private string ResponseValue { get; set; }
        private HttpWebResponse endpointresponse {get;set; }
        public string GetOAuthToken(string requestUriString)
        {
            try
            {                
                HttpWebRequest req =
                (HttpWebRequest)WebRequest.Create(requestUriString);
                req.Method = "POST";
                req.Timeout = Timeout.Infinite;
                req.KeepAlive = true;
                Stopwatch requeststopwatch = Stopwatch.StartNew();
                endpointresponse = (HttpWebResponse)req.GetResponse();
                requeststopwatch.Stop();
                double ResponseTime = requeststopwatch.Elapsed.TotalMilliseconds;
                Console.WriteLine($"Time taken by OAuth request to execute is : {ResponseTime} ms ");
                return GetTokenFromResponse();
            }
            catch(WebException failedrequest)
            {                              
                Console.WriteLine($"Request failed due to error : {failedrequest.Message}");
                throw;
            }
            finally
            {
                if (endpointresponse != null) endpointresponse.Close();
            }
        }
        private string GetTokenFromResponse()
        {
            try
            {
                ResponseStream = endpointresponse.GetResponseStream();
                using (var reader = new StreamReader(ResponseStream))
                {
                    ResponseValue = reader.ReadToEnd();
                }
                dynamic apiresponse = JsonConvert.DeserializeObject(ResponseValue);
                Accesstoken = apiresponse.access_token;
                Console.WriteLine($"Access token generated by authorisation server is : {Accesstoken}");
            }
            catch (Exception StreamProcessing)
            {
                Console.WriteLine($"Unable to process response stream due to error {StreamProcessing.Message}");
                throw;
            }
            finally
            {
                if (ResponseStream != null) { ResponseStream.Dispose(); };
            }
            return Accesstoken;
        }
    }
}